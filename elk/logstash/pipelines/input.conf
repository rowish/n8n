input {
  http_poller {
    # Define the API request
    urls => {
      weather_data => {
        method => "GET"
        url => "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/Bucharest,RO?unitGroup=metric&key=9EDRW7YK3SRVSF56YVM7BSC5W"
      }
    }
    request_timeout => 60
    schedule => { cron => "*/15 * * * *" } # Run every 15 minutes
    codec => "json" # Automatically parses JSON responses
    metadata_target => "http_poller_metadata"
  }
}


filter {
  # Example filter to extract and structure the weather datas
  prune {
    blacklist_names => [ "days", "http_poller_metadata", "stations" ]
  }
  mutate {
    rename => { "[currentConditions][icon]" => "[conditions][status]" }
    rename => { "[currentConditions][conditions]" => "[conditions][description]" }
    rename => { "[currentConditions][temp]" => "[conditions][temperature]" }
    rename => { "[currentConditions][humidity]" => "[conditions][humidity]" }
    rename => { "[currentConditions][windspeed]" => "[conditions][windspeed]" }
    rename => { "[currentConditions][winddir]" => "[conditions][winddir]" }
    rename => { "[currentConditions][pressure]" => "[conditions][pressure]" }
    rename => { "description" => "forecast" }
    rename => { "address" => "[location][address]" }
    rename => { "resolvedAddress" => "[location][resolvedAddress]" }
    rename => { "city" => "[location][city]" }
    rename => { "latitude" => "[location][latitude]" }
    rename => { "longitude" => "[location][longitude]" }
    rename => { "timezone" => "[timedata][timezone]" }
    rename => { "tzoffset" => "[timedata][tzoffset]" }
    rename => { "tzoffset" => "[timedata][tzoffset]" }
    add_field => { "source" => "OpenWeatherMap" }
  }
  
  if [alert] => {
    rename => { "[alert][]" => "[conditions][aspect]" }
  }
#  ruby {
#    code => "
#      temp_celsius = (event.get('[conditions][temperature]').to_f - 32) / 1.8
#      rounded_temp = temp_celsius.round(1) # Round to one decimal place
#      event.set('[conditions][temperature]', rounded_temp)
#    "
#  }
  mutate {
    remove_field => [ "currentConditions", "event", "queryCost" ]
  }
}


output {
  elasticsearch {
    index => "logstash-%{+YYYY.MM.dd}"
    hosts=> "${ELASTIC_HOSTS}"
    user=> "${ELASTIC_USER}"
    password=> "${ELASTIC_PASSWORD}"
    cacert=> "certs/ca/ca.crt"
  }
}
